/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 15 10:36:30 GMT 2018
 */

package com.ckjava.xutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ckjava.xutils.CommandUtils;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommandUtils_ESTest extends CommandUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter..mptyil5Filter", "org.apache.commons.io.filefilter..mptyil5Filter");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      CommandUtils.execTask("org.apache.commons.io.filefilter..mptyil5Filter", stringArray0, (File) mockFile0, "org.apache.commons.io.filefilter..mptyil5Filter", "org.apache.commons.io.filefilter..mptyil5Filter", (OutputStream) pipedOutputStream0);
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      File file0 = MockFile.createTempFile("V&-6u2t%C@Wd;j+g", "V&-6u2t%C@Wd;j+g");
      StringBuffer stringBuffer0 = new StringBuffer("");
      CommandUtils.execTask("", (String[]) null, file0, "", stringBuffer0);
      assertEquals("C:\\Users\\ck\\AppData\\Local\\Temp\\V&-6u2t%C@Wd;j+g0V&-6u2t%C@Wd;j+g", file0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MockFile mockFile0 = new MockFile((File) null, "org.apache.commons.io.filefilter.MagicNumberFileFilter");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E'Sw#I2JbGd/y{x", true);
      CommandUtils.execTask("NMrMwb,Do^&dO'", stringArray0, (File) mockFile0, "org.apache.commons.io.filefilter.MagicNumberFileFilter", (OutputStream) mockFileOutputStream0);
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("uAkK[Wr|BTB;_T7wwiC");
      // Undeclared exception!
      try { 
        CommandUtils.execTask("EC", (String[]) null, (File) mockFile0, "", (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ckjava.xutils.CommandUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[2];
      File file0 = MockFile.createTempFile(",;`\"IL_l=H>O5Aj.v", "58K2@m");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        CommandUtils.execTask("S`8y^u|P$`@*WSK6iK", stringArray0, file0, ",;`\"IL_l=H>O5Aj.v", "S`8y^u|P$`@*WSK6iK", (OutputStream) dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      File file0 = MockFile.createTempFile("thread name = {}, finish execute command = {}", "l:D$U7U");
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        CommandUtils.execTask("tvHI|)<", stringArray0, file0, "a?u/=yP`", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CommandUtils commandUtils0 = new CommandUtils();
  }
}
