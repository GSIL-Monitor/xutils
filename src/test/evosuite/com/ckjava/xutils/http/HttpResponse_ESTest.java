/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 15 10:41:57 GMT 2018
 */

package com.ckjava.xutils.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ckjava.xutils.http.HttpResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpResponse_ESTest extends HttpResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      HttpResponse<Object> httpResponse0 = new HttpResponse<Object>(object0, (String) null, "]o^`'dFPOjK0(WP");
      String string0 = httpResponse0.getSign();
      assertNull(string0);
      assertEquals("]o^`'dFPOjK0(WP", httpResponse0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpResponse<String> httpResponse0 = new HttpResponse<String>(":", "", "");
      String string0 = httpResponse0.getSign();
      assertEquals("", httpResponse0.getMessage());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpResponse<Object> httpResponse0 = HttpResponse.getReturn((Object) null, (String) null, (String) null);
      String string0 = httpResponse0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpResponse<String> httpResponse0 = HttpResponse.getReturn("", "success", "");
      String string0 = httpResponse0.getMessage();
      assertEquals("success", httpResponse0.getSign());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      String string0 = HttpResponse.getErrorMsg(mockThrowable0);
      assertEquals("Exception:org.evosuite.runtime.mock.java.lang.MockThrowable,Message:", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HttpResponse<Object> httpResponse0 = new HttpResponse<Object>(integer0, "Ey=1nd", "Ey=1nd");
      httpResponse0.getData();
      assertEquals("Ey=1nd", httpResponse0.getMessage());
      assertEquals("Ey=1nd", httpResponse0.getSign());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpResponse.getReturn((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ckjava.xutils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpResponse<Object> httpResponse0 = null;
      try {
        httpResponse0 = new HttpResponse<Object>((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ckjava.xutils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      HttpResponse<Object> httpResponse0 = new HttpResponse<Object>(mockThrowable0);
      assertEquals("exception", httpResponse0.getSign());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpResponse.getErrorMsg((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ckjava.xutils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpResponse<String> httpResponse0 = HttpResponse.getReturn("success", "fail", "fail");
      httpResponse0.setSign("fail");
      assertEquals("fail", httpResponse0.getSign());
      assertEquals("fail", httpResponse0.getMessage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpResponse<String> httpResponse0 = HttpResponse.getReturn("success", "fail", "fail");
      httpResponse0.setData("exception");
      assertEquals("fail", httpResponse0.getSign());
      assertEquals("fail", httpResponse0.getMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      HttpResponse<Object> httpResponse0 = HttpResponse.getReturn((Throwable) mockThrowable0);
      String string0 = httpResponse0.getMessage();
      assertEquals("exception", httpResponse0.getSign());
      assertEquals("Exception:org.evosuite.runtime.mock.java.lang.MockThrowable,Message:null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpResponse<Integer> httpResponse0 = new HttpResponse<Integer>((Integer) null, "fail", "fail");
      assertEquals("fail", httpResponse0.getMessage());
      
      httpResponse0.setMessage("success");
      assertEquals("success", httpResponse0.getMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      HttpResponse<Object> httpResponse0 = HttpResponse.getReturn((Throwable) mockThrowable0);
      String string0 = httpResponse0.getSign();
      assertEquals("exception", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      HttpResponse<Object> httpResponse0 = HttpResponse.getReturn((Throwable) mockThrowable0);
      httpResponse0.getData();
      assertEquals("exception", httpResponse0.getSign());
  }
}
