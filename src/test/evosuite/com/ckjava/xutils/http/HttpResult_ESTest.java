/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 15 10:43:28 GMT 2018
 */

package com.ckjava.xutils.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ckjava.xutils.http.HttpResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpResult_ESTest extends HttpResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult(577, "", "+VhIw^");
      int int0 = httpResult0.getStatusCode();
      assertEquals(577, int0);
      assertEquals("+VhIw^", httpResult0.getExceptionString());
      assertEquals("", httpResult0.getBodyString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult((-1258), (String) null, "0{7");
      int int0 = httpResult0.getStatusCode();
      assertEquals((-1258), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult(773, "", "v/x");
      String string0 = httpResult0.getExceptionString();
      assertEquals("v/x", string0);
      assertEquals(773, httpResult0.getStatusCode());
      assertEquals("", httpResult0.getBodyString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult(312, "]A0ydA*y^ql7L4>3", "");
      String string0 = httpResult0.getBodyString();
      assertEquals("", httpResult0.getExceptionString());
      assertEquals("]A0ydA*y^ql7L4>3", string0);
      assertEquals(312, httpResult0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult((-1890), "", "");
      httpResult0.getBodyString();
      assertEquals((-1890), httpResult0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpResult.getException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ckjava.xutils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult(0, "", "");
      httpResult0.getExceptionString();
      assertEquals(0, httpResult0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult();
      httpResult0.setBodyString("$?");
      assertNull(httpResult0.getExceptionString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult();
      httpResult0.setStatusCode(1070);
      assertEquals(1070, httpResult0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult();
      httpResult0.setExceptionString("$?");
      assertNull(httpResult0.getBodyString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).getMessage();
      HttpResult httpResult0 = HttpResult.getException(throwable0);
      String string0 = httpResult0.getBodyString();
      assertEquals(500, httpResult0.getStatusCode());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult();
      String string0 = httpResult0.toString();
      assertEquals("HttpResult{statusCode=0, bodyString='null', exceptionString='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult();
      int int0 = httpResult0.getStatusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpResult httpResult0 = new HttpResult();
      String string0 = httpResult0.getExceptionString();
      assertNull(string0);
  }
}
