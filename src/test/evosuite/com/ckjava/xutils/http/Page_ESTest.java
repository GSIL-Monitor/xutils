/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 15 10:40:27 GMT 2018
 */

package com.ckjava.xutils.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ckjava.xutils.http.Page;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3092);
      Page<Object> page0 = new Page<Object>(integer0, integer0, integer0, (List<Object>) null);
      page0.setTotalCount((Integer) null);
      page0.getTotalCount();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Page<Integer> page0 = new Page<Integer>(integer0, integer0, integer0, (List<Integer>) null);
      page0.getTotalCount();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-628));
      Page<String> page0 = Page.getPage(integer0, integer0, integer0, (List<String>) null);
      page0.getTotalCount();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-3571));
      Page<Object> page0 = new Page<Object>(integer0, integer0, integer0, (List<Object>) null);
      page0.setStart((Integer) null);
      page0.getStart();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-352));
      Page<Object> page0 = Page.getPage(integer0, integer0, integer0, (List<Object>) null);
      page0.getStart();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1152);
      Integer integer1 = new Integer(1);
      Page<Object> page0 = Page.getPage(integer1, integer0, integer0, (List<Object>) null);
      Integer integer2 = page0.getStart();
      assertEquals(1152, (int)page0.getPageSize());
      assertEquals(1, (int)page0.getPages());
      assertEquals(1152, (int)page0.getTotalCount());
      assertEquals(1, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(3092);
      Page<Object> page0 = new Page<Object>(integer0, integer0, integer0, (List<Object>) null);
      page0.setPages((Integer) null);
      Integer integer1 = page0.getPages();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-3785));
      Page<Object> page0 = new Page<Object>(integer0, integer1, integer0, (List<Object>) null);
      assertEquals(1, (int)page0.getPages());
      
      page0.setPages(integer1);
      page0.getPages();
      assertEquals(0, (int)page0.getTotalCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Page<Integer> page0 = new Page<Integer>(integer0, integer0, integer0, (List<Integer>) null);
      page0.setPages(integer0);
      Integer integer1 = page0.getPages();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1152);
      Integer integer1 = new Integer(1);
      Page<Object> page0 = Page.getPage(integer1, integer1, integer0, (List<Object>) null);
      Integer integer2 = page0.getPages();
      assertEquals(1, (int)page0.getPageSize());
      assertEquals(1, (int)page0.getStart());
      assertEquals(1152, (int)integer2);
      assertEquals(1152, (int)page0.getTotalCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Page<Object> page0 = Page.getPage(integer0, (Integer) null, integer0, (List<Object>) null);
      Integer integer1 = page0.getPageSize();
      assertNull(integer1);
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-352));
      Page<Object> page0 = Page.getPage(integer0, integer0, integer0, (List<Object>) null);
      page0.getPageSize();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-352));
      // Undeclared exception!
      try { 
        Page.getPage(integer0, integer0, (Integer) null, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ckjava.xutils.http.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3);
      // Undeclared exception!
      try { 
        Page.getPage(integer1, integer0, integer1, (List<Object>) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.ckjava.xutils.http.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page<Object> page0 = null;
      try {
        page0 = new Page<Object>((Integer) null, (Integer) null, (Integer) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ckjava.xutils.http.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1294);
      Page<String> page0 = null;
      try {
        page0 = new Page<String>(integer0, integer0, integer1, (List<String>) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.ckjava.xutils.http.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-3785));
      Integer integer2 = new Integer(709);
      Page<Object> page0 = new Page<Object>(integer0, integer1, integer2, (List<Object>) null);
      assertEquals(0, (int)page0.getStart());
      assertEquals((-3785), (int)page0.getPageSize());
      assertEquals(709, (int)page0.getTotalCount());
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Page<Integer> page0 = new Page<Integer>(integer0, integer0, integer0, (List<Integer>) null);
      page0.getPageSize();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Page<String> page0 = Page.getPage(integer0, integer0, integer0, (List<String>) null);
      page0.getDataList();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(16);
      Page<Object> page0 = new Page<Object>(integer0, integer0, integer0, (List<Object>) null);
      page0.getTotalCount();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Page<String> page0 = Page.getPage(integer0, integer0, integer0, (List<String>) null);
      page0.setPageSize(integer0);
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Page<String> page0 = Page.getPage(integer0, integer0, integer0, (List<String>) null);
      page0.setDataList((List<String>) null);
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Page<String> page0 = Page.getPage(integer0, integer0, integer0, (List<String>) null);
      page0.getStart();
      assertEquals(1, (int)page0.getPages());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(16);
      Page<Object> page0 = new Page<Object>(integer0, integer0, integer0, (List<Object>) null);
      page0.getPageSize();
      assertEquals(1, (int)page0.getPages());
  }
}
