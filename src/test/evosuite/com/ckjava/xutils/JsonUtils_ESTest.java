/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 15 10:35:27 GMT 2018
 */

package com.ckjava.xutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ckjava.xutils.JsonUtils;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JsonUtils.resolveJsonString("{{{\"$rxf\":\".\"}");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      try { 
        JsonUtils.resolveJsonString("[,0-$}'}(XVLB`'7Yy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      try { 
        JsonUtils.resolveJsonString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      List<String> list0 = JsonUtils.resolveJsonString("[7]");
      assertFalse(list0.contains("[7]"));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      try { 
        JsonUtils.resolveJsonString("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      List<String> list0 = JsonUtils.resolveJsonString("{\"$re\":\".^\"}");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      List<String> list0 = JsonUtils.resolveJsonString("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
  }
}
