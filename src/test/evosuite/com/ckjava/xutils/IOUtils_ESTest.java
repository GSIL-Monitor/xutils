/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 15 10:41:08 GMT 2018
 */

package com.ckjava.xutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ckjava.xutils.IOUtils;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOUtils.getString((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)121;
      byteArray0[0] = (byte)121;
      sequenceInputStream0.markSupported();
      byteArray0[1] = (byte)45;
      sequenceInputStream0.read(byteArray0);
      IOUtils.getString((InputStream) sequenceInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.getString((InputStream) sequenceInputStream0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      sequenceInputStream0.mark(2);
      IOUtils.getString((InputStream) sequenceInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.getString((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStream inputStream0 = org.apache.commons.io.IOUtils.toInputStream("w", charset0);
      String string0 = IOUtils.getString(inputStream0);
      assertEquals(0, inputStream0.available());
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOUtils.getString((InputStream) sequenceInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      sequenceInputStream0.read();
      byteArray0[3] = (byte) (-64);
      sequenceInputStream0.close();
      sequenceInputStream0.read(byteArray0, (-1140), 61);
      IOUtils.getString((InputStream) sequenceInputStream0, "");
      // Undeclared exception!
      try { 
        IOUtils.getString((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IOUtils.getString((InputStream) null);
      String string0 = IOUtils.getString((InputStream) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.write((-1));
      IOUtils.getString((InputStream) pipedInputStream0, "IrHenI5CL(f7");
      String string0 = IOUtils.getString((InputStream) pipedInputStream0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        org.apache.commons.io.IOUtils.toInputStream("\r\n", "\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = IOUtils.getString((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\n\b\u0005\uFFFD\u0001\uFFFDM\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOUtils.getString((InputStream) sequenceInputStream0, "The wildcard array must not be null");
      sequenceInputStream0.close();
      IOUtils.getString((InputStream) sequenceInputStream0, "");
      IOUtils.getString((InputStream) sequenceInputStream0, "");
      sequenceInputStream0.read();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getString((InputStream) sequenceInputStream0);
      IOUtils.getString((InputStream) sequenceInputStream0);
      IOUtils.getString((InputStream) sequenceInputStream0);
      // Undeclared exception!
      try { 
        org.apache.commons.io.IOUtils.toBufferedInputStream((InputStream) sequenceInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }
}
